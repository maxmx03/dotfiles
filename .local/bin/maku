#!/usr/bin/env bash

function log {
  gum log --time rfc822 --level "$@"
}

MAKU_CONFIG_FILE="maku.build"

function init {
  gum spin --title="Initializing maku" --spinner="dot" -- sleep 1

  if [[ -f "$MAKU_CONFIG_FILE" ]]; then
    log info "$MAKU_CONFIG_FILE already exists"
  else
    echo '# vim: ft=sh
BUILD="./build"
SOURCE="./src"
INCLUDE="./include"
CC="gcc"
CFLAGS="-std=c99"' >"$MAKU_CONFIG_FILE"
    log info "Created $MAKU_CONFIG_FILE"
  fi

  if [[ -z "$MAKU_CONFIG_FILE" ]] || [[ ! -f "$MAKU_CONFIG_FILE" ]]; then
    log error "$MAKU_CONFIG_FILE not found"
    exit 1
  fi

  source "$MAKU_CONFIG_FILE"

  gum spin --title="Generating project files" --spinner="dot" -- sleep 1

  if [[ -n "$BUILD" ]] && [[ ! -d "$BUILD" ]]; then
    if mkdir "$BUILD"; then
      log info "Created $BUILD"
    else
      log error "Failed to create build directory"
      exit 1
    fi
  fi

  if [[ -n "$SOURCE" ]] && [[ ! -d "$SOURCE" ]]; then
    if mkdir "$SOURCE"; then
      echo '#include <stdio.h>

int main(int argc, char **argv) {
  printf("Hello, world!\n");
  return 0;
}' >"$SOURCE/main.c"
      find $SOURCE -name "*.c" -print0 | xargs -0 gum log --time rfc822 --level info "CREATED"
    else
      log error "Failed to create source directory"
      exit 1
    fi
  fi

  if [[ -n "$INCLUDE" ]] && [[ ! -d "$INCLUDE" ]]; then
    if mkdir "$INCLUDE"; then
      log info "Created $INCLUDE"
    else
      log error "Failed to create include directory"
      exit 1
    fi
  fi
  exit 0

}

function build {
  if [[ -z "$MAKU_CONFIG_FILE" ]] || [[ ! -f "$MAKU_CONFIG_FILE" ]]; then
    log error "$MAKU_CONFIG_FILE not found"
    exit 1
  fi

  source "$MAKU_CONFIG_FILE"

  if [[ -z "$BUILD" ]] || [[ -z "$SOURCE" ]] || [[ -z "$INCLUDE" ]]; then
    log error "$MAKU_CONFIG_FILE not found"
    exit 1
  fi

  if [ ! -d "$SOURCE" ]; then
    log error "Source directory does not exist"
    log error "Please run 'maku init'"
    exit 0
  fi

  if [ ! -f "$SOURCE/main.c" ]; then
    log error "$SOURCE/main.c not found"
    exit 1
  fi

  if [ ! -d "$INCLUDE" ]; then
    ls $SOURCE | xargs -I {} basename {} .c | xargs -I {} $CC -MD -MF $BUILD/{}.d $CFLAGS -c ./src/{}.c -o $BUILD/{}.o
    cd $BUILD && ls *.o | xargs "$CC" -o program
    ls | xargs -I {} gum log --time rfc822 --level info $BUILD/{}
    exit 0
  fi

  if [ ! -d "$BUILD" ]; then
    mkdir "$BUILD"
  fi

  ls $SOURCE | xargs -I {} basename {} .c | xargs -I {} $CC -MD -MF $BUILD/{}.d $CFLAGS -I$INCLUDE -c ./src/{}.c -o $BUILD/{}.o
  cd $BUILD && find . -name "*.o" -print0 | xargs -0 "$CC" -o program
  cd .. && find $BUILD -name "*" -print0 | xargs -0 gum log --time rfc822 --level info "COMPILED"
}

function run {
  if [[ -z "$MAKU_CONFIG_FILE" ]] || [[ ! -f "$MAKU_CONFIG_FILE" ]]; then
    log error "$MAKU_CONFIG_FILE not found"
    exit 1
  fi

  source "$MAKU_CONFIG_FILE"

  if [[ -z "$BUILD" ]] || [[ -z "$SOURCE" ]] || [[ -z "$INCLUDE" ]]; then
    log error "$MAKU_CONFIG_FILE not found"
    exit 1
  fi

  if [ ! -d "$BUILD" ]; then
    log error "Please run maku build first"
    exit 0
  fi

  $BUILD/program
}

function help {
  echo "Usage: maku <command>"
  echo "Commands:"
  echo "  init: Initializes the project"
  echo "  build: Builds the project"
  echo "  run: Runs the project"
}

function clean {
  if [[ -z "$MAKU_CONFIG_FILE" ]] || [[ ! -f "$MAKU_CONFIG_FILE" ]]; then
    log error "$MAKU_CONFIG_FILE not found"
    exit 1
  fi

  source "$MAKU_CONFIG_FILE"

  if [[ -z "$BUILD" ]] || [[ -z "$SOURCE" ]] || [[ -z "$INCLUDE" ]]; then
    log error "$MAKU_CONFIG_FILE not found"
    exit 1
  fi

  if [ ! -d "$BUILD" ]; then
    log error "Nothing to clean"
    exit 0
  fi

  if ! rm -r "$BUILD"; then
    log error "Failed to clean build directory"
    exit 1
  else
    log info "Cleaned build directory"
  fi
  exit 0
}

case "$1" in
init)
  init
  ;;
build)
  build
  ;;
run)
  run
  ;;
clean)
  clean
  ;;
*)
  help
  ;;
esac
