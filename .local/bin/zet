#!/usr/bin/env bash

ZETPATH="$HOME/.zet"

function log {
  gum log --time rfc822 --level "$@"
}

function edit {
  if [[ ! -d "$ZETPATH" ]]; then
    log error "$ZETPATH does not exists."
    return 1
  fi
  NOTES="$(find $ZETPATH -type f -name "*.md")"
  SELECTED_NOTE=$(gum filter $NOTES)
  $EDITOR "$SELECTED_NOTE"
}

function tree {
  command tree -r $ZETPATH
}

function get_note_dir {
  escape_tag() {
    echo "$1" | sed "s/'/''/g"
  }
  TAGS="$1"
  for TAG in $(echo "$TAGS" | tr ',' '\n' | sed 's/^ *//;s/ *$//' | grep -v "^$"); do
    NOTEDIR+="$(escape_tag "$TAG")/"
  done
  echo "$NOTEDIR"
}

function add {
  if [[ ! -d "$ZETPATH" ]]; then
    log error "$ZETPATH does not exists."
    return 2
  fi
  DATE=$(date +%Y%m%d%H%M%S)
  TITLE="$(gum input --placeholder 'title')"
  TYPE="$(gum choose fleeting literature permanent)"
  TAGS="$(gum input --placeholder 'tags')"
  PUBDATE="$(date +%Y/%m/%d)"
  HEADER="---\ntitle: $TITLE\ntags: [$TAGS]\npubDate: $PUBDATE\n---\n"
  NOTEDIR="$(get_note_dir "$TAGS")"
  if ! mkdir -p "$ZETPATH/$TYPE/$NOTEDIR"; then
    log error "Failed to create $NOTEDIR"
    return 1
  fi
  FILEPATH="$ZETPATH/$TYPE/$NOTEDIR/$TITLE-${DATE}.md"
  if ! touch "$FILEPATH"; then
    log error "Failed to create $FILEPATH"
    return 1
  else
    log info "$FILEPATH created."
  fi
  echo -e $HEADER >"$FILEPATH"
  if ! $EDITOR "$FILEPATH"; then
    log error "$EDITOR failed to open $FILEPATH"
    return 1
  fi
}

function init {
  if [[ -d "$ZETPATH" ]]; then
    log error "$ZETPATH already exists."
    return 1
  fi
  if ! mkdir -p "$ZETPATH"; then
    log error "Failed to create $ZETPATH"
    return 1
  fi
  log info "$ZETPATH created."
  zet git init
  README="# Zettelkasten

 A simple note-taking tool. Why? Because I want something simple and fast. How to start? First, learn about
 [zettelkasten](https://zettelkasten.de/overview/), then learn about **Marksman** and **Obsidian**. Write your
 notes to be compatible with **Marksman** and **Obsidian**. Why markdown? Because you can easily create web pages with it,
 and it can even be easily converted to MDX.

# Dependencies

- [gum](https://github.com/charmbracelet/gum)
- [marksman](https://github.com/artempyanykh/marksman)
- [neovim](https://neovim.io/)
- [obsidian](https://obsidian.md/) (optional)

## Plugins for neovim

- [markview](https://github.com/OXY2DEV/markview.nvim)
- [markdown.nvim](https://github.com/tadmccorkle/markdown.nvim) (optional)

## Usage

To get started, initialize your vault:
\`\`\`bash
zet init
\`\`\`

Add a new note:
\`\`\`bash
zet add
\`\`\`

## Alternatives

- [telekasten](https://github.com/nvim-telekasten/telekasten.nvim)
- [zk-org](https://github.com/zk-org/zk)
- [neorg](https://github.com/nvim-neorg/neorg)
- [emacs org-mode](https://orgmode.org/)
"
  if ! echo "$README" >"$ZETPATH/README.md"; then
    log error "Failed to create $ZETPATH/README.md"
  fi
  MARKSMANCONFIG='markdown.file_extensions = ["md", "markdown"]
markdown.glfm_heading_ids.enable = true
text_sync = "full"
title_from_heading = false
incremental_references = false
paranoid = false

[code_action]
toc.enable = true
create_missing_file.enable = true

[completion]
candidates = 50
wiki.style = "title-slug"
'
  if ! echo "$MARKSMANCONFIG" >"$ZETPATH/.marksman.toml"; then
    log error "Failed to create $ZETPATH/.marksman.toml"
    return 1
  fi
}

function find_tags {
  if [[ ! -d "$ZETPATH" ]]; then
    log error "$ZETPATH does not exists."
    return 1
  fi
  find "$ZETPATH" -type d -name ".git" -prune -o -type d -print0 |
    tail -n +2 -z |
    while IFS= read -r -d '' tag; do
      basename "$tag"
    done
}

function find_notes {
  if [[ ! -d "$ZETPATH" ]]; then
    log error "$ZETPATH does not exists."
    return 1
  fi
  find $ZETPATH -type f -name "*.md"
}

function help {
  echo "usage: zet [-h | --help] <command> [<args>]

  dependencies: gum, tree

  commands:
  init      initialize zet
  add       add a new note
  tree      show zet directory tree
  edit      edit a note
  date      show current date
  git       run git command in zet directory
  --tags -t  list all tags
  --notes -n list all notes
  "
}

case "$1" in
--help | -h)
  help
  ;;
--notes | -n)
  find_notes
  ;;
--tags | -t)
  find_tags
  ;;
init)
  init
  ;;
add)
  add
  ;;
tree)
  tree
  ;;
edit)
  edit
  ;;
date)
  date +%Y/%m/%d
  ;;
git)
  git --git-dir="$ZETPATH/.git" --work-tree=$ZETPATH "${@:2}"
  ;;
*)
  help
  ;;
esac
